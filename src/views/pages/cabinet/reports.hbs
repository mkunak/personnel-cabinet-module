<header class="header header-cabinet">
  <div class="header__logo">
    <img src="/assets/img/logo.svg" alt="logo">
  </div>
  <label for="burger" class="header__burger">
    <span></span>
  </label>
</header>
<section class="cabinet">
  <input class="cabinet__check" id="burger" type="checkbox">
  {{>cabinet/sidebar}}
  <div class="cabinet__content">
    <div class="cabinet-container">
      <div class="cabinet__links">
        <div class="cabinet__link-wrapper">
          <a class="cabinet__link" href="/cabinet/prereports">Предрепорт</a>
        </div>
        <div class="cabinet__link-wrapper active">
          <a class="cabinet__link" href="/cabinet/reports">Репорт</a>
        </div>
      </div>
      <div class="cabinet__content-wrapper reports">
        <div class="cabinet__content-column">
          <div class="cabinet__report-last">
            <h4 class="cabinet__block-title">
              Ваш последний репорт
            </h4>
            <div class="cabinet__report-qa">
              <p class="cabinet__report-quest">Дата и время отправки</p>
              <div class="cabinet__report-answers">
                <p class="cabinet__report-answer">{{report.changed}}</p>
              </div>
            </div>
            <div class="cabinet__report-qa">
              <p class="cabinet__report-quest">Working hours</p>
              <div class="cabinet__report-answers">
                <p class="cabinet__report-answer">{{report.workingHours}} hours</p>
              </div>
            </div>
            <div class="cabinet__report-qa">
              <p class="cabinet__report-quest">Tasks in progress</p>
              <div class="cabinet__report-answers">
                {{#each report.tasks.inProgress}}
                  <p class="cabinet__report-answer">{{incremented @index}}. {{this}}</p>
                {{/each}}
              </div>
            </div>
            <div class="cabinet__report-qa">
              <p class="cabinet__report-quest">Tasks on check</p>
              <div class="cabinet__report-answers">
                {{#each report.tasks.onCheck}}
                  <p class="cabinet__report-answer">{{incremented @index}}. {{this}}</p>
                {{/each}}
              </div>
            </div>
            <div class="cabinet__report-qa">
              <p class="cabinet__report-quest">Done tasks</p>
              <div class="cabinet__report-answers">
                {{#each report.tasks.done}}
                  <p class="cabinet__report-answer">{{incremented @index}}. {{this}}</p>
                {{/each}}
              </div>
            </div>
            <div class="cabinet__report-qa">
              <p class="cabinet__report-quest">Todo tasks</p>
              <div class="cabinet__report-answers">
                {{#each report.tasks.todo}}
                  <p class="cabinet__report-answer">{{incremented @index}}. {{this}}</p>
                {{/each}}
              </div>
            </div>
          </div>
          <div class="cabinet__archive">
            <h2 class="cabinet__archive-title">Архив отчетов</h1>
              <button class="cabinet__button storage-btn">
                <img src="/assets/img/next-icon.svg" alt="">
              </button>
          </div>
        </div>
        <div class="cabinet__content-column">
          <div class="cabinet__create-report">
            <h4 class="cabinet__block-title">
              Создание нового репорта
            </h4>
            <form action="" class="cabinet__create-report-form">
              <div class="cabinet__report-time">
                <p class="cabinet__create-report-title">Working hours<span>*</span></p>
                <div class="cabinet__create-input-wrapper">
                  <input type="number" placeholder="чч:мм" min="0"
                    class="common-input cabinet__create-report_input report-working-hours">
                </div>
              </div>
              <div class="cabinet__report-tasks cabinet__report-done-tasks">
                <p class="cabinet__create-report-title">Done tasks<span>*</span></p>
                <div class="cabinet__create-input-wrapper report-done-task-wrapper">
                  <input type="text" placeholder="1. Введите задачу"
                    class="common-input cabinet__create-report_input report-done-task">
                </div>
              </div>
              <div class="cabinet__report-tasks cabinet__report-in-progress-tasks">
                <p class="cabinet__create-report-title">Tasks in progress<span>*</span></p>
                <div class="cabinet__create-input-wrapper report-in-progress-task-wrapper">
                  <input type="text" placeholder="1. Введите задачу"
                    class="common-input cabinet__create-report_input report-in-progress-task">
                </div>
              </div>
              <div class="cabinet__report-tasks cabinet__report-todo-tasks">
                <p class="cabinet__create-report-title">Todo tasks<span>*</span></p>
                <div class="cabinet__create-input-wrapper report-todo-task-wrapper">
                  <input type="text" placeholder="1. Введите задачу"
                    class="common-input cabinet__create-report_input report-todo-task">
                </div>
              </div>
              <div class="cabinet__report-tasks cabinet__report-links">
                <p class="cabinet__create-report-title">Links<span>*</span></p>
                <div class="cabinet__create-input-wrapper report-links-wrapper">
                  <input type="text" placeholder="1. Enter link"
                    class="common-input cabinet__create-report_input report-link">
                </div>
              </div>
              <div class="cabinet__create-report-btn-wrapper">
                <button class="cabinet__create-report_button">
                  Отправить
                  <img src="/assets/img/next-icon.svg" alt="">
                </button>
              </div>
            </form>
          </div>
        </div>
        <div class="cabinet__content-column">
          <div class="cabinet__advice">
            <h3 class="cabinet__advice-title">Полезный </br> совет</h3>
            <div class="cabinet__advice-description">
              {{#each tip.data}}
                <p class="cabinet__advice-description-item">{{this}}</p>
              {{/each}}
            </div>
            <input type="hidden" name="tipId" value="{{tip.id}}" class="current-tip-id" />
            <div class="cabinet__btn-wrapper">
              <button class="cabinet__button new-tip-btn">
                <img src="/assets/img/next-icon.svg" alt="">
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>
<script src="/libs/handlebars/handlebars.min-v4.7.6.js"></script>
<script src="/js/exit-window.js"></script>
<script>
  const showDoneInputs = function () {
    const taskContainer = document.querySelector('.cabinet__report-done-tasks');
    taskContainer.children[taskContainer.children.length - 1].querySelector('input')
      .addEventListener('change', function (e) {
        taskContainer.insertAdjacentHTML('beforeend', `
          <div class="cabinet__create-input-wrapper report-done-task-wrapper">
            <input type="text" placeholder="1. Введите задачу"
              class="common-input cabinet__create-report_input report-done-task">
          </div>
        `);
        showDoneInputs();
      });
  };
  showDoneInputs();
</script>
<script>
  const showInProgressInputs = function () {
    const taskContainer = document.querySelector('.cabinet__report-in-progress-tasks');
    taskContainer.children[taskContainer.children.length - 1].querySelector('input')
      .addEventListener('change', function (e) {
        taskContainer.insertAdjacentHTML('beforeend', `
          <div class="cabinet__create-input-wrapper report-in-progress-task-wrapper">
            <input type="text" placeholder="1. Введите задачу"
              class="common-input cabinet__create-report_input report-in-progress-task">
          </div>
        `);
        showInProgressInputs();
      });
  };
  showInProgressInputs();
</script>
<script>
  const showTodoInputs = function () {
    const taskContainer = document.querySelector('.cabinet__report-todo-tasks');
    taskContainer.children[taskContainer.children.length - 1].querySelector('input')
      .addEventListener('change', function (e) {
        taskContainer.insertAdjacentHTML('beforeend', `
          <div class="cabinet__create-input-wrapper report-todo-task-wrapper">
            <input type="text" placeholder="1. Введите задачу"
              class="common-input cabinet__create-report_input report-todo-task">
          </div>
        `);
        showTodoInputs();
      });
  };
  showTodoInputs();
</script>
<script>
  const showLinkInputs = function () {
    const taskContainer = document.querySelector('.cabinet__report-links');
    taskContainer.children[taskContainer.children.length - 1].querySelector('input')
      .addEventListener('change', function (e) {
        taskContainer.insertAdjacentHTML('beforeend', `
          <div class="cabinet__create-input-wrapper report-links-wrapper">
            <input type="text" placeholder="1. Введите задачу"
              class="common-input cabinet__create-report_input report-link">
          </div>
        `);
        showLinkInputs();
      });
  };
  showLinkInputs();
</script>
<script>
  const sendReportBtn = document.querySelector('.cabinet__create-report_button');

  sendReportBtn.addEventListener("click", function (e) {
    e.preventDefault();
    const workingHours = document.querySelector('.cabinet__create-input-wrapper .report-working-hours').value;

    const doneTaskNodes = document.querySelectorAll('.cabinet__create-input-wrapper .report-done-task');
    const doneTasks = [...doneTaskNodes].map((node) => node.value).filter((task) => task).join('***');
    const inProgressTaskNodes = document.querySelectorAll('.cabinet__create-input-wrapper .report-in-progress-task');
    const inProgressTasks = [...inProgressTaskNodes].map((node) => node.value).filter((task) => task).join('***');
    const todoTaskNodes = document.querySelectorAll('.cabinet__create-input-wrapper .report-todo-task');
    const todoTasks = [...todoTaskNodes].map((node) => node.value).filter((task) => task).join('***');
    const linksNodes = document.querySelectorAll('.cabinet__create-input-wrapper .report-link');
    const links = [...linksNodes].map((node) => node.value).filter((task) => task).join('***');

    const csrf = '{{csrf}}';
    const formData = new FormData();
    formData.append('workingHours', workingHours);
    formData.append('doneTasks', doneTasks);
    formData.append('inProgressTasks', inProgressTasks);
    formData.append('todoTasks', todoTasks);
    formData.append('links', links);

    axios.defaults.headers.post['X-CSRF-Token'] = csrf;
    axios.defaults.headers.post['Content-Type'] = 'multipart/form-data';
    axios.post(`/cabinet/create-report`, formData)
      .then(function (response) {
        const { message, messageType } = response.data;

        console.log('>>> response', response);

        const onAfterClose = (messageType) => {
          if (messageType === 'success') {
            return () => window.location.reload();
          }
          return () => window.location.reload();
        }

        Swal.fire({
          title: `${messageType.toUpperCase()}!`,
          text: message,
          icon: messageType,
          confirmButtonText: 'Ok',
          onAfterClose: onAfterClose(messageType),
        });
      })
      .catch(function (error) {
        console.log(error);
      });
  });
</script>
<script>
  const newTipBtn = document.querySelector('.cabinet__button.new-tip-btn');

  newTipBtn.addEventListener("click", function (e) {
    e.preventDefault();

    const csrf = '{{csrf}}';
    const tipId = document.querySelector('.current-tip-id');

    const formData = new FormData();
    formData.append('tipId', tipId.value);

    axios.defaults.headers.post['X-CSRF-Token'] = csrf;
    axios.defaults.headers.post['Content-Type'] = 'multipart/form-data';
    axios.post(`/cabinet/new-tip`, formData)
      .then(function (response) {
        const { tip } = response.data;

        const tipContainer = document.querySelector('.cabinet__advice-description');

        const template = tip.data.map((tipData) => {
          return `<p class="cabinet__advice-description-item">${tipData}</p>`;
        }).join('');

        tipContainer.innerHTML = template;

        tipId.setAttribute('value', tip.id);
      })
      .catch(function (error) {
        console.log(error);
      });
  });
</script>
<script>
  const storageBtn = document.querySelector('.storage-btn');
  storageBtn.addEventListener('click', function () {
    window.location.href = '/cabinet/report-storage';
  });
</script>
<script type="text/javascript">
  window.addEventListener('keydown', function (e) {
    if (e.keyIdentifier == 'U+000A' || e.keyIdentifier == 'Enter' || e.keyCode == 13) {
      if (e.target.nodeName == 'INPUT' && e.target.type == 'text') { e.preventDefault(); return false; }
    }
  }, true);
</script>