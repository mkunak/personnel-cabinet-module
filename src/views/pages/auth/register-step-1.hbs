<section class="login">
  {{>login/sidebar}}
  <div class="main">
    <div class="login-container">
      <h2 class="main__sub-title">Step 1 / 3</h2>
      <h1 class="main__title">Register</h1>
      <!-- Чтобы отображались ошибки на всех инпутах, нужно добавить к блоку 
      с классом main__form класс error. 
      Для того, чтобы ошибка была на одном инпуте нужно добавить к блоку 
      с классом main__form-item класс error -->
      <form class="main__form" name="register-1-form">
        <div class="main__form-item email">
          <p class="main__form-sign">Email</p>
          <input class="common-input" name="email" type="email" placeholder="Enter email"
            id="user_register_form_email" />
        </div>
        <div class="main__form-item password">
          <p class="main__form-sign">Password</p>
          <input class="common-input password-input" name="password" type="password" placeholder="Enter password"
            id="user_register_form_password" />
          <button type="button" class="main__form-item_button">
            <img src="/assets/img/eye.svg" alt="eye">
          </button>
        </div>
        <div class="main__form-item password-repeat">
          <p class="main__form-sign">Repeat password</p>
          <input class="common-input password-input" name="password_repeat" type="password" placeholder="Repeat password"
            id="user_register_form_password_repeat" />
          <button type="button" class="main__form-item_button">
            <img src="/assets/img/eye.svg" alt="eye">
          </button>
        </div>
        <p class="main__form-details">
          Password should consist of min 6 characters and containe min 1 digit and min 1 letter
        </p>
        <input type="hidden" name="_csrf" value="{{csrf}}" />
        <div class="main__form-buttons">
          <button class="main__form-current-btn register-one-btn">
            Register
          </button>
          {{!-- <button class="main__form-other-link signin-btn">
            Вход
          </button> --}}
          {{!-- <a href="/login" class="main__form-other-link">Вход</a> --}}
        </div>
      </form>
    </div>
  </div>
</section>
<script src="/js/shop-hide-password.js"></script>
<script>
  const validEmail = document.getElementById('user_register_form_email');
  const validPassword = document.getElementById('user_register_form_password');
  const validPasswordRepeat = document.getElementById('user_register_form_password_repeat');

  validEmail.addEventListener('change', function () {
    const regex = /\S+@\S+\.\S+/;
    if (!regex.test(this.value)) {
      document.querySelector('.main__form-item.email').classList.add("error");
    } else {
      document.querySelector('.main__form-item.email').classList.remove("error");
    }
  });

  validPassword.addEventListener('change', function () {
    const regex = /^.{6,}$/;
    if (!regex.test(this.value)) {
      document.querySelector('.main__form-item.password').classList.add("error");
    } else {
      document.querySelector('.main__form-item.password').classList.remove("error");
    }
  });

  validPasswordRepeat.addEventListener('change', function () {
    const regex = /^.{6,}$/;
    if (!regex.test(this.value)) {
      document.querySelector('.main__form-item.password-repeat').classList.add("error");
    } else {
      document.querySelector('.main__form-item.password-repeat').classList.remove("error");
    }
  });

  const registerBtn = document.querySelector('.main__form-current-btn.register-one-btn');

  registerBtn.addEventListener("click", function (e) {
    e.preventDefault();

    if (!isFilled()) return;
    if (!isValid()) return;

    const email = document.getElementById('user_register_form_email').value;
    const password = document.getElementById('user_register_form_password').value;
    const password_repeat = document.getElementById('user_register_form_password_repeat').value;

    const formData = new FormData();
    formData.append('email', email);
    formData.append('password', password);
    formData.append('password_repeat', password_repeat);
    const csrf = '{{csrf}}';

    axios.defaults.headers.post['X-CSRF-Token'] = csrf;
    axios.defaults.headers.post['Content-Type'] = 'multipart/form-data';
    axios.post(`/register`, formData)
      .then(function (response) {
        const { message, messageType } = response.data;

        console.log('>>> response', response);

        const onAfterClose = (messageType) => {
          if (messageType === 'success') {
            return () => window.location.href = '/register/2';
          }
          return () => window.location.reload();
        }

        Swal.fire({
          title: `${messageType.toUpperCase()}!`,
          text: message,
          icon: messageType,
          confirmButtonText: 'Ok',
          onAfterClose: onAfterClose(messageType),
        });
      })
      .catch(function (error) {
        console.log(error);
      });
  });

  function isFilled() {
    const a = document.forms["register-1-form"]["email"].value;
    const b = document.forms["register-1-form"]["password"].value;
    const c = document.forms["register-1-form"]["password_repeat"].value;

    if (a == null || a == "") {
      document.querySelector('.main__form-item.email').classList.add("error");
    }
    if (b == null || b == "") {
      document.querySelector('.main__form-item.password').classList.add("error");
    }
    if (c == null || c == "") {
      document.querySelector('.main__form-item.password-repeat').classList.add("error");
    }

    if (a == null || a == "", b == null || b == "", c == null || c == "") {
      Swal.fire({
        title: `WARNING!`,
        text: "All fields should be filled",
        icon: 'warning',
        confirmButtonText: 'Ok',
      });
      return false;
    }
    return true;
  }

  function isValid() {
    const loginForm = document.querySelector('form.main__form');
    const notValid = !!loginForm.querySelector('.error');
    if (notValid) {
      Swal.fire({
        title: `WARNING!`,
        text: "All fields should be valid",
        icon: 'warning',
        confirmButtonText: 'Ok',
      });
      return false;
    }
    return true;
  }
</script>
{{!-- <script>
  const signinBtn = document.querySelector('.main__form-other-link.signin-btn');

  signinBtn.addEventListener("click", function (e) {
    e.preventDefault();

    const email = document.getElementById('user_register_form_email').value;
    const password = document.getElementById('user_register_form_password').value;
    // const password_repeat = document.getElementById('user_register_form_password_repeat').value;

    const formData = new FormData();
    formData.append('email', email);
    formData.append('password', password);
    // formData.append('password_repeat', password_repeat);
    const csrf = '{{csrf}}';

    axios.defaults.headers.post['X-CSRF-Token'] = csrf;
    axios.defaults.headers.post['Content-Type'] = 'multipart/form-data';
    axios.post(`/login`, formData)
      .then(function (response) {
        const { message, messageType } = response.data;

        console.log('>>> response', response);

        const onAfterClose = (messageType) => {
          if (messageType === 'success') {
            return () => window.location.href = '/cabinet';
          }
          return () => window.location.reload();
        }

        Swal.fire({
          title: `${messageType.toUpperCase()}!`,
          text: message,
          icon: messageType,
          confirmButtonText: 'Ok',
          onAfterClose: onAfterClose(messageType),
        });
      })
      .catch(function (error) {
        console.log(error);
      });
  });
</script> --}}